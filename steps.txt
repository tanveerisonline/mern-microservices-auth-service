0. Initialized gitignore file.
1. Added Github Repository.
2. Installed nvm on system.
3. Created.nvmrc fileinside project and set node version for project.
4. Initialized package.json using command: npm init.
5. Installed typescript in project using command: npm i -D typescript.
6. Created tsconfig.json file using command:  npx tsc --init.
7. Configured tsconfig.json file for project.
8. Compiled typescript code with this command:  npx tsc.
9. Installed types/node package to let typescript to import core libraries of node.js command: npm i -D @types/node.
10.Installed prettier code formatter using command: npm install --save-dev --save-exact prettier.
11.Created a .prettierrc.json file.
12.Check formating of files using command:  npx prettier . --check.
13.To Format the code using prettier use command: npx prettier . --write. 
14.Add scripts inside package.json file to check and fix code by adding : "check":"prettier . --check" and "fix":"prettier . --write".
15.Use commands to Format the code type: npx run check || npx run fix.
16.Added eslint typescript using this command: npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint .
17.Create .eslintrc.cjs file in the root folder when using import in node.js.
18.Add this code inside .eslintrc.cjs file /* eslint-env node */
module.exports = {
    extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],
    parser: '@typescript-eslint/parser',
    plugins: ['@typescript-eslint'],
    root: true,
};
19.Create .eslintignore file and add dist and node_modules folder name their.
20.To check eslint error use command: npx eslint dot.
21.To fix suggested errors use command: npx eslint dot --fix.
22.Use this command to get prettier and eslint conflicts: npm install --save-dev eslint-config-prettier.
23.Add this code inside the .eslintrc.cjs file extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended-type-checked',
        'prettier',
    ],
24.Add scripts to package.json file for eslint use this code : "lint":"esint ." || "lint:fix":"eslint . --fix".
25.Installed husky to automate code formating and eslint check command: npm pkg set scripts.prepare="husky install".
26.Add this code to create pre-commit file command: npx husky add .husky/pre-commit "enter script command here from package.json".
27.Add npm run script names inside pre-commit file to automate checks and fixes.
28.Add eslint stage using this command: npm install --save-dev lint-staged.
29.Add this code at the end of your package.json file :"lint:staged": {
        "*.ts": [
            "npm run lint:fix",
            "npm run format:fix"
        ]
    }
30.Go to husky folder then pre-commit file and add remove previous npm commands and add this :npx lint:staged
To use config folder configurations inside server.js file use this code:import { Config } from './config';
31.Create app.ts file and install as dev dependencies nodemon and ts-node using command: npm i -D nodemon ts-node.
32.Install express using command: npm install express.